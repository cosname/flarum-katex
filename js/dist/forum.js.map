{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,+BCL9D,MAAM,EAA+BC,OAAOC,KAAKC,OAAe,OCA1D,EAA+BF,OAAOC,KAAKC,OAAO,0B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,yB,aCIxDC,IAAIC,aAAaC,IAAI,iBAAiB,YAEpCC,EAAAA,EAAAA,QAAOC,IAAAA,UAAuB,YAAY,WAIvBC,EAAE,oBAAqBC,KAAKC,SAClCC,MAAK,WACdH,EAAEC,MAAMG,YAAYJ,EAAEC,MAAMI,OAC9B,IAGAC,oBAAoBN,EAAE,gBAAiBC,KAAKC,SAAS,GAAI,CAEvD,YAAc,CAAC,SAAU,WAAY,QAAS,WAAY,MAAO,QAEjE,WAAa,CACX,CAACK,KAAM,KAAOC,MAAO,KAAOC,SAAS,GACrC,CAACF,KAAM,MAAOC,MAAO,MAAOC,SAAS,GACrC,CAACF,KAAM,MAAOC,MAAO,MAAOC,SAAS,KAI3C,KAGAX,EAAAA,EAAAA,QAAOC,IAAAA,UAAuB,YAAY,WAIvBC,EAAE,oBAAqBC,KAAKC,SAClCC,MAAK,WACdH,EAAEC,MAAMG,YAAYJ,EAAEC,MAAMI,OAC9B,IAGAC,oBAAoBN,EAAE,gBAAiBC,KAAKC,SAAS,GAAI,CAEvD,YAAc,CAAC,SAAU,WAAY,QAAS,WAAY,MAAO,QAEjE,WAAa,CACX,CAACK,KAAM,KAAOC,MAAO,KAAOC,SAAS,GACrC,CAACF,KAAM,MAAOC,MAAO,MAAOC,SAAS,GACrC,CAACF,KAAM,MAAOC,MAAO,MAAOC,SAAS,KAI3C,KAGAX,EAAAA,EAAAA,QAAOY,IAAAA,UAAsB,UAAU,WAWrC,IARA,IAAIC,EAAOV,KAAKV,MACVqB,EAAO,8BACPC,EAAOD,EAAKE,OACZC,EAAO,UACPC,EAAOD,EAAKD,OAEdG,EAAIN,EAAKO,QAAQN,GAEdK,GAAK,GAAG,CAEb,IAAIE,GADJR,EAAOA,EAAKS,MAAM,EAAGH,GAAKN,EAAKS,MAAMH,EAAIJ,IAC5BK,QAAQH,GACjBI,GAAK,IAAIR,EAAOA,EAAKS,MAAM,EAAGD,GAAKR,EAAKS,MAAMD,EAAIH,IACtDC,EAAIN,EAAKO,QAAQN,EACnB,CACAX,KAAKV,MAAQoB,CAEf,GAEF,G","sources":["webpack://@cosname/katex/webpack/bootstrap","webpack://@cosname/katex/webpack/runtime/compat get default export","webpack://@cosname/katex/webpack/runtime/define property getters","webpack://@cosname/katex/webpack/runtime/hasOwnProperty shorthand","webpack://@cosname/katex/webpack/runtime/make namespace object","webpack://@cosname/katex/external root \"flarum.core.compat['extend']\"","webpack://@cosname/katex/external root \"flarum.core.compat['components/CommentPost']\"","webpack://@cosname/katex/external root \"flarum.core.compat['components/TextEditor']\"","webpack://@cosname/katex/./src/forum/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/TextEditor'];","import { extend } from 'flarum/extend';\r\nimport CommentPost from 'flarum/components/CommentPost';\r\nimport TextEditor from 'flarum/components/TextEditor';\r\n\r\napp.initializers.add('cosname-katex', function() {\r\n  // render math expressions on every post loading\r\n  extend(CommentPost.prototype, 'oncreate', function() {\r\n\r\n    // remove the <code> tags that enclose KaTeX\r\n    // (we added <code class=\"katex-escape\"> tags on LaTeX expressions when saving the post)\r\n    var katex_expr = $('code.katex-escape', this.element);\r\n    katex_expr.each(function() {\r\n      $(this).replaceWith($(this).html());\r\n    });\r\n\r\n    // run KaTeX renderer on the single post body (not on the entire page or the entire post)\r\n    renderMathInElement($('div.Post-body', this.element)[0], {\r\n      // do not render inside those tags\r\n      \"ignoredTags\":[\"script\", \"noscript\", \"style\", \"textarea\", \"pre\", \"code\"],\r\n      // those are the delimiters we are going to use to write latex formulas\r\n      \"delimiters\":[\r\n        {left: \"$$\",  right: \"$$\",  display: true},\r\n        {left: \"\\\\[\", right: \"\\\\]\", display: true},\r\n        {left: \"\\\\(\", right: \"\\\\)\", display: false}\r\n      ]\r\n    });\r\n\r\n  });\r\n\r\n  // also render math expressions on post updates, e.g., after editing the content\r\n  extend(CommentPost.prototype, 'onupdate', function() {\r\n\r\n    // remove the <code> tags that enclose KaTeX\r\n    // (we added <code class=\"katex-escape\"> tags on LaTeX expressions when saving the post)\r\n    var katex_expr = $('code.katex-escape', this.element);\r\n    katex_expr.each(function() {\r\n      $(this).replaceWith($(this).html());\r\n    });\r\n\r\n    // run KaTeX renderer on the single post body (not on the entire page or the entire post)\r\n    renderMathInElement($('div.Post-body', this.element)[0], {\r\n      // do not render inside those tags\r\n      \"ignoredTags\":[\"script\", \"noscript\", \"style\", \"textarea\", \"pre\", \"code\"],\r\n      // those are the delimiters we are going to use to write latex formulas\r\n      \"delimiters\":[\r\n        {left: \"$$\",  right: \"$$\",  display: true},\r\n        {left: \"\\\\[\", right: \"\\\\]\", display: true},\r\n        {left: \"\\\\(\", right: \"\\\\)\", display: false}\r\n      ]\r\n    });\r\n\r\n  });\r\n\r\n  // remove the <code class=\"katex-escape\"> tags in editor\r\n  extend(TextEditor.prototype, 'oninit', function() {\r\n\r\n    // get the current text\r\n    var text = this.value;\r\n    const tag1 = '<code class=\"katex-escape\">';\r\n    const len1 = tag1.length;\r\n    const tag2 = '</code>';\r\n    const len2 = tag2.length;\r\n\r\n    var i = text.indexOf(tag1);\r\n    // recursively remove tags\r\n    while (i >= 0) {\r\n      text = text.slice(0, i) + text.slice(i + len1);\r\n      var j = text.indexOf(tag2);\r\n      if (j >= 0)  text = text.slice(0, j) + text.slice(j + len2);\r\n      i = text.indexOf(tag1);\r\n    }\r\n    this.value = text;\r\n\r\n  });\r\n\r\n});\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","initializers","add","extend","CommentPost","$","this","element","each","replaceWith","html","renderMathInElement","left","right","display","TextEditor","text","tag1","len1","length","tag2","len2","i","indexOf","j","slice"],"sourceRoot":""}